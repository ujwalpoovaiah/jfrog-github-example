name: build-publish-scan
on:
    push:
        branches:

permissions:
  actions: read 
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
jobs:
    build-publish-python:
        runs-on: ubuntu-latest
        env:
          DOCKER_REPO: 'vigneshs-docker'
          IMAGE_NAME: 'my-very-cool-image:${{ github.run_number }}'
          JF_URL: https://${{ secrets.JF_URL }}/
        steps:
            - name: Any Name Bash Test Step
              shell: bash
              run: |
                printenv
            # Use the specific setup-cli branch
            - name: Setup JFrog CLI
              uses: jfrog/setup-jfrog-cli@v4
              id: setup-cli
              env:
                JF_URL: https://${{ secrets.JF_URL }}/
                JF_PROJECT: 'vigneshs'
              with:
                  oidc-provider-name: vigneshs-github
                  oidc-audience: jfrog-github-oidc

            - name: Checkout the repository
              uses: actions/checkout@v4


            - name: configure jfrog environment
              run: |
                # Use a curated repository for python dependencies resolution
                jf pip-config --repo-resolve=gitlab-pypi   

            - name: configure environment
              run: |    
                pip install --upgrade pip     
                python3 -m pip install --upgrade pip setuptools wheel sigstore
                wheel -h
                pip show setuptools
                echo $VIRTUAL_ENV

            - name: build project
              run: |                                   
                jf pip install -r requirements.txt  --module=jfrog-python-example                
                python setup.py sdist bdist_wheel
                cd dist && echo "hashes=$(sha256sum * | base64 -w0)" >> $GITHUB_OUTPUT

            - name: publish python package
              run: |
                jf rt u dist/ gitlab-pypi/example-projects/ --module=jfrog-python-example

            #- name: Set up Docker Buildx
            #  uses: docker/setup-buildx-action@v3
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Authenticate Docker
              uses: docker/login-action@v3
              with:
                registry: ${{secrets.REGISTRY}}
                username: ${{ steps.setup-cli.outputs.oidc-user }}
                password: ${{ steps.setup-cli.outputs.oidc-token }}
           
            - name: Setup buildx instance
              uses: docker/setup-buildx-action@v3
              with:
                use: true
                platforms: linux/amd64,linux/arm64
                install: true
            #- name: Build Docker image
            #  uses: docker/build-push-action@v5
            #  id: build
            #  with:
            #    push: true
            #    platforms: linux/amd64, linux/arm64
            #    tags: ${{secrets.REGISTRY}}/${{ env.IMAGE_NAME }}
            #    provenance: false

            - name: docker build
              run: |  
                docker buildx ls
                jf docker --version
                jf docker build --tag ${{secrets.REGISTRY}}/${{ env.IMAGE_NAME }} --push .

            - name: docker scan
              run: |  
                 jf docker pull ${{secrets.REGISTRY}}/${{ env.IMAGE_NAME }}
                 jf docker scan ${{secrets.REGISTRY}}/${{ env.IMAGE_NAME }}                   

            - name: publish build info
              run: |
                jf rt build-publish

            - name: build scan
              run: |            
                jf build-scan

